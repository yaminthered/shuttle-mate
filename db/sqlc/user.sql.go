// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (phone_number, name)
VALUES ($1, $2)
RETURNING id, phone_number, name, avatar_url, bio, created_at, updated_at
`

type CreateUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	Name        sql.NullString `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.PhoneNumber, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Name,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, phone_number, name, avatar_url, bio, created_at, updated_at
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUser(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Name,
		&i.AvatarUrl,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
